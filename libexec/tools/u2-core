#!/usr/bin/env bash
set -e

if [[ -z "$ARM_BREW_DIR" || -z "$X86_BREW_DIR" ]]; then
    log "ERROR" "ARM_BREW_DIR or X86_BREW_DIR not set."
    exit 1
fi

escape_path() {
    echo "$1" | sed 's/[.[\*^$(){}+?|]/\\&/g'
}


arm_re=$(escape_path "$ARM_BREW_DIR")
x86_re=$(escape_path "$X86_BREW_DIR")
BREW_PATH_REGEX="^(${arm_re}|${x86_re})/(lib|opt|Cellar)"

scan_binaries(){
    local python_dir="$1"
    find "$python_dir" -type f \( -name "*.dylib" -o -name "*.so" \) -print \
        -o -type f -exec sh -c '
            for file; do
                if file "$file" | grep -qE "Mach-O.*executable"; then
                    echo "$file"
                fi
            done
        ' sh {} +   
}

scan_binary_and_cache(){
    local python_dir="$1"
    local output_file="$2"

    : > "$output_file"

    local output_data=""

    color_echo "INFO" "Scanning directory for binary.."
    while IFS= read -r binary; do
        [[ -f "$binary" ]] || continue

        log "INFO" "Processing binary: $binary"

        local binary_name
        binary_name=$(basename "$binary")
        if ! lipo -info "$binary" | grep -q "fat"; then
            log "INFO" "$binary is not a fat binary, skipping extraction."
            continue
        fi

        color_echo "DEBUG" "Queued binary: $binary"

        output_data+="$binary"$'\n'          
    done < <(scan_binaries "$python_dir")
    echo -n "$output_data" >> "$output_file"
}

extract_fat_binary(){
    local binary="$1"
    local target_x86_extract_dir="$2"
    local target_arm_extract_dir="$3"

    [[ -f "$binary" ]] || return
    
    log "INFO" "Processing binary: $binary"

    local binary_name
    binary_name=$(basename "$binary")

    if ! lipo -info "$binary" | grep -q "fat"; then
        log "INFO" "$binary is not a fat binary, skipping extraction."
        return
    fi

    local x86_binary="$target_x86_extract_dir/$binary_name"
    local arm_binary="$target_arm_extract_dir/$binary_name"
    if [[ ! -f "$x86_binary" || ! -f "$arm_binary" ]]; then
        log "INFO" "Extracting $binary to $x86_binary and $arm_binary"
        lipo -extract x86_64 "$binary" -output "$x86_binary"
        lipo -extract arm64 "$binary" -output "$arm_binary"
    else
        color_echo "DEBUG" "Already extracted: $x86_binary and $arm_binary exist"
    fi
}

safe_replace_load_dylib() {
    local binary="$1"
    local old_path="$2"
    local new_path="$3"

    install_name_tool -change "$old_path" "$new_path" "$binary"
    local status=$?
    if [[ $status -ne 0 ]]; then
        log "ERROR" "install_name_tool failed with status $status for binary $binary"
    else
        log "INFO" "Successfully updated $old_path to $new_path in $binary"
    fi

    return $status
}

update_lc_load_dylib() {
    local binary=""
    local target_int_path=""
    local target_ext_path=""

    for arg in "$@"; do
        case $arg in
            --binary=*) binary="${arg#*=}" ;;
            --int=*)    target_int_path="${arg#*=}" ;;
            --ext=*)    target_ext_path="${arg#*=}" ;;
            *)
                log "WARN" "Unknown argument: $arg"
                color_echo "WARN" "Unknown argument"
                return 1
                ;;
        esac
    done

    if [[ -z "$binary" ]]; then
        log "WARN" "Missing required argument: --binary"
        return 1
    fi

    if [[ ! -f "$binary" ]]; then
        log "WARN" "Binary not found: $binary"
        return 1
    fi

    local libraries
    libraries=$(otool -l "$binary" | awk '/LC_LOAD_DYLIB/ {show=1} show && /name/ {print $2; show=0}')

    log "INFO" "Existing LC_LOAD_DYLIB entries in $binary:"
    log "INFO" "$libraries"

    while IFS= read -r library; do
        [[ -n "$library" ]] || continue

        local base_name
        base_name=$(basename "$library")
        log "INFO" "Found LC_LOAD_DYLIB: $library (basename: $base_name)"

        if [[ "$library" == /usr/lib/* || "$library" == /System/Library/* ]]; then
            log "INFO" "Skipping system library: $library"
            continue
        fi

        if [[ -n "$target_ext_path" && "$library" =~ $BREW_PATH_REGEX ]]; then
            local new_path="$target_ext_path/$base_name"
            if [[ -f "$new_path" ]]; then
                log "INFO" "Update lc_load_dylib $binary: $library -> $new_path"
                safe_replace_load_dylib "$binary" "$library" "$new_path"
                continue 
            else
                log "WARN" "Target $new_path not found for brew library ($library), skipping."
                continue 
            fi
        fi

        if [[ -n "$target_int_path" && "$library" != "$target_int_path/"* ]]; then
            local new_int_path="$target_int_path/$base_name"
            if [[ -f "$new_int_path" ]]; then
                log "INFO" "Update LC_LOAD_DYLIB $binary: $library -> $new_int_path"
                safe_replace_load_dylib "$binary" "$library" "$new_int_path"
            else
                log "WARN" "Target dylib: $new_int_path not found for $library, skipping."
            fi
        elif [[ "$library" == "$target_int_path/"* ]]; then
            color_echo "DEBUG" "LC_LOAD_DYLIB already correct path: $library"
        fi

    done <<< "$libraries"
}

safe_replace_rpath() {
    local binary="$1"
    local old_rpath="$2"
    local new_rpath="$3"
    
    install_name_tool -rpath "$old_rpath" "$new_rpath" "$binary"
    local status=$?

    if [[ $status -ne 0 ]]; then
        log "ERROR" "install_name_tool failed with status $status for rpath change in binary $binary"
    else
        log "INFO" "Successfully updated rpath: $old_rpath -> $new_rpath in $binary"
    fi
    
    return $status
}

update_lc_rpath() {
    local binary=""
    local target_int_path=""
    local target_ext_path=""

    for arg in "$@"; do
        case $arg in
            --binary=*) binary="${arg#*=}" ;;
            --int=*)    target_int_path="${arg#*=}" ;;
            --ext=*)    target_ext_path="${arg#*=}" ;;
            *)
                log "WARN" "Unknown argument: $arg"
                return 1
                ;;
        esac
    done

    if [[ -z "$binary" ]]; then
        log "WARN" "Missing required argument: --binary"
        return 1
    fi

    if [[ ! -f "$binary" ]]; then
        log "WARN" "Binary not found: $binary"
        return 1
    fi

    local libraries
    libraries=$(otool -l "$binary" | awk '/cmd LC_RPATH/,/path/ { if ($1 == "path") print $2 }')
    

    log "INFO" "Existing LC_RPATH entries in $binary:"
    log "INFO" "$libraries"

    local base_name_binary
    base_name_binary=$(basename "$binary")

    while IFS= read -r library; do
        [[ -n "$library" ]] || continue

        local base_dir
        base_dir=$(dirname "$library")     
        log "INFO" "Found LC_RPATH in $base_name_binary: $library (base directory: $base_dir)"

        if [[ "$library" == /usr/lib/* || "$library" == /System/Library/* ]]; then
            log "INFO" "Skipping system library: $library"
            continue
        fi

        if [[ -n "$target_ext_path" && "$library" =~ $BREW_PATH_REGEX ]]; then
            local new_path="$target_ext_path"
            if [[ -d "$new_path" ]]; then
                log "INFO" "Update LC_RPATH: $library -> $new_path"
                safe_replace_rpath "$binary" "$library" "$new_path"
                continue
            else
                log "WARN" "Target LC_RPATH not found for $library: $new_path, skipping."
                continue
            fi
        fi
        
        if [[ -n "$target_int_path" && "$library" != "$target_int_path/"* ]]; then
            local new_path="$target_int_path"
            if [[ -d "$new_path" ]]; then
                log "INFO" "Update LC_RPATH: $library -> $new_path"
                safe_replace_rpath "$binary" "$library" "$new_path"
            else
                log "WARN" "Target LC_RPATH not found for $library: $new_path, skipping."
            fi
        elif [[ "$library" == "$target_int_path/"* ]]; then
            color_echo "DEBUG" "LC_RPATH already correct path: $library"
        fi
    done <<< "$libraries"
}

update_lc_id_dylib() {
    local lib="$1"
    local target_id_path="$2"

    if [[ ! -f "$lib" ]]; then
        log "WARN" "Cannot update LC_ID_DYLIB â€” file not found: $lib"
        return 1
    fi

    local base_name
    base_name=$(basename "$lib")
    local new_id="$target_id_path/$base_name"

    log "INFO" "Setting LC_ID_DYLIB for $lib to $new_id"
    if ! install_name_tool -id "$new_id" "$lib"; then
        log "WARN" "install_name_tool failed to set LC_ID_DYLIB for $lib"
        return 1
    fi
}

collect_ext_lib(){
    local binary="$1"
    local collected_dir="$2"
    local collected_metadata="$3"

    mkdir -p "$collected_dir"

    local seen_file
    seen_file="$collected_metadata"

    touch "$seen_file"
    log "INFO" "seen_file: $seen_file"

    local libs
    libs=$(otool -L "$binary" | awk 'NR>1 {print $1}' | grep -E "$BREW_PATH_REGEX" || true)

    if [[ -n "$libs" ]]; then
        log "INFO" "Found binary: $binary"
        while IFS= read -r lib; do
            log "INFO" "Binary $binary is linked with library: $lib"
        done <<< "$libs"
    else
        log "INFO" "Skipping binary (no external libraries): $binary"
    fi

    for lib in $libs; do
        local real_lib
        real_lib=$(readlink -f "$lib" 2>/dev/null || realpath "$lib")
        [[ -z "$real_lib" ]] && real_lib="$lib"

        if grep -Fxq "$real_lib" "$seen_file"; then
            log "INFO" "Already processed: $real_lib"
            continue
        fi
        echo "$real_lib" >> "$seen_file"

        if [[ "$real_lib" == "$collected_dir/"* ]]; then
            log "INFO" "Skipping recursive collect on internal lib: $real_lib"
            continue
        fi

        local base_name
        base_name=$(basename "$real_lib")
        local dest_path="$collected_dir/$base_name"

        if [[ ! -f "$dest_path" ]]; then
            cp "$real_lib" "$dest_path"
            log "INFO" "Copied $real_lib to $dest_path"
            collect_ext_lib "$real_lib" "$collected_dir" "$collected_metadata"
        else
            color_echo "DEBUG" "Already copied: $base_name"
        fi

        if [[ -L "$lib" ]]; then
            local link_name
            link_name=$(basename "$lib")
            if [[ "$link_name" != "$base_name" ]]; then
                ln -sf "$base_name" "$collected_dir/$link_name"
                log "INFO" "Created symlink: $link_name -> $base_name"
            fi
        fi

    done
}

merge_binary_or_lib() {
    local arm_binary="$1"
    local x86_binary="$2"
    local merged_binary="$3"
    local merge_metadata="$4"

    local seen_binaries
    seen_binaries="$merge_metadata"

    touch "$seen_binaries"

    if [[ ! -f "$arm_binary" || ! -f "$x86_binary" ]]; then
        log "ERROR" "One or both binaries are missing or invalid: $arm_binary, $x86_binary"
        color_echo "ERROR" "One or both binaries are missing or invalid"
        return 1
    fi

    if [[ -L "$arm_binary" ]]; then
        arm_binary=$(realpath "$arm_binary")
        log "INFO" "using realpath $arm_binary"
    fi

    if [[ -L "$x86_binary" ]]; then
        x86_binary=$(realpath "$x86_binary")
        log "INFO" "using realpath $x86_binary"
    fi  

    if [[ -L "$merged_binary" ]]; then
        merged_binary=$(realpath "$merged_binary")
        log "INFO" "Using realpath for merged_binary: $merged_binary"
    fi

    if grep -Fxq "$merged_binary" "$seen_binaries"; then
        log "INFO" "Already processed: $merged_binary"
        return 0
    fi

    lipo -create "$arm_binary" "$x86_binary" -output "$merged_binary"
    if [[ $? -eq 0 ]]; then
        log "INFO" "Successfully merged $arm_binary and $x86_binary into $merged_binary"
        echo "$merged_binary" >> "$seen_binaries"
    else
        log "ERROR" "Failed to merge binaries: $arm_binary and $x86_binary"
        color_echo "ERROR" "Failed to merge binaries"
        return 1
    fi

    local dir_path
    dir_path=$(dirname "$merged_binary")

    log "INFO" "Check & create symlink"
    for lib in "$arm_binary" "$x86_binary"; do
        local lib_dir
        lib_dir=$(dirname "$lib")

        for link in "$lib_dir"/*; do
            if [[ -L "$link" ]]; then
                local link_name
                link_name=$(basename "$link")
                local target_name
                target_name=$(readlink "$link")

                if [[ -f "$dir_path/$(basename "$target_name")" ]]; then
                    ln -sf "$(basename "$target_name")" "$dir_path/$link_name"
                    log "INFO" "Created symlink: $link_name -> $(basename "$target_name")"
                else
                    log "WARN" "Symlink target $target_name not found for $link_name"
                fi
            fi
        done
    done
}

resign_all_binaries() {
    local binary_dir="$1"

    if [[ -d "$binary_dir" ]]; then
        find "$binary_dir" -type f \( -name "*.dylib" -o -name "*.so" -o -name "python3*" \) | while read -r file; do
            if codesign --force --sign - "$file"; then
                log "INFO" "Re-signed $file"
            else
                log "WARN" "Failed to sign $file"
            fi
        done
    elif [[ -f "$binary_dir" ]]; then
        if codesign --force --sign - "$binary_dir"; then
            log "INFO" "Re-signed $binary_dir"
        else
            log "WARN" "Failed to sign $binary_dir"
        fi
    else
        log "ERROR" "$binary_dir is neither a valid file nor a directory."
        color_echo "ERROR" "Failed to Re-sign binary"
    fi
}