#!/usr/bin/env bash

update_lc_load_dylib() {
    local binary="$1"
    local target_int_path="$2"
    local target_ext_path="$3"

    if [[ ! -f "$binary" ]]; then
        log "WARN" "Error: Python binary not found at $binary"
        log "INFO" "Please verify the Python version and binary path."
        return 1
    fi

    local libraries
    libraries=$(otool -l "$binary" | awk '/LC_LOAD_DYLIB/ {show=1} show && /name/ {print $2; show=0}')

    log "INFO" "Existing LC_LOAD_RPATH entries in $binary:"
    log "INFO" "$libraries"

    while IFS= read -r library; do
        [[ -n "$library" ]] || continue

        local base_name
        base_name=$(basename "$library")
        color_echo "DEBUG" "Found LC_LOAD_DYLIB: $library (basename: $base_name)"

        if [[ "$library" == /usr/lib/* || "$library" == /System/Library/* ]]; then
            color_echo "DEBUG" "Skipping system library: $library"
            continue

        elif [[ "$library" =~ $BREW_PATH_REGEX ]]; then
            local new_path="$target_ext_path/$base_name"
            if [[ -f "$new_path" ]]; then
                install_name_tool -change "$library" "$new_path" "$binary" || log "WARN" "install_name_tool failed"
                log "INFO" "Updated lc_load_dylib: $library -> $new_path"
            else
                log "WARN" "Warning: Target $new_path not found for brew library, skipping."
            fi

        elif [[ "$library" != "$target_int_path/"* ]]; then
            local new_path="$target_int_path/$base_name"
            if [[ -f "$new_path" ]]; then
                install_name_tool -change "$library" "$new_path" "$binary" || log "WARN" "install_name_tool failed"
                log "INFO" "Updated rpath internal: $library -> $new_path"
            else
                log "WARN" "Warning: Target $new_path not found for internal library, skipping."
            fi

        else
            color_echo "DEBUG" "Already correct rpath: $library"
        fi

    done <<< "$libraries"
}

update_lc_rpath() {
    local binary="$1"
    local target_int_path="$2"
    local target_ext_path="$3"

    if [[ ! -f "$binary" ]]; then
        log "WARN" "Error: Python binary not found at $binary"
        log "INFO" "Please verify the Python version and binary path."
        return 1
    fi

    local libraries
    libraries=$(otool -l "$binary" | awk '/cmd LC_RPATH/,/path/ { if ($1 == "path") print $2 }')
    

    log "INFO" "Existing LC_RPATH entries in $binary:"
    log "INFO" "$libraries"

    while IFS= read -r library; do
        [[ -n "$library" ]] || continue

        local base_dir
        base_dir=$(dirname "$library")
        color_echo "DEBUG" "Found LC_RPATH: $library (basename: $base_dir)"

        if [[ "$library" == /usr/lib/* || "$library" == /System/Library/* ]]; then
            color_echo "DEBUG" "Skipping system library: $library"
            continue

        elif [[ "$library" =~ $BREW_PATH_REGEX ]]; then
            local new_path="$target_ext_path"
            if [[ -d "$new_path" ]]; then
                install_name_tool -rpath "$library" "$new_path" "$binary" || log "WARN" "install_name_tool failed"
                log "INFO" "Successfully updated LC_RPATH: $library -> $new_path"
            else
                log "WARN" "Error: Failed to update LC_RPATH for $library."
            fi
        elif [[ "$library" != "$target_int_path/"* ]]; then
            local new_path="$target_int_path"
            if [[ -d "$new_path" ]]; then
                install_name_tool -rpath "$library" "$new_path" "$binary" || log "WARN" "install_name_tool failed"
                log "INFO" "Successfully updated LC_RPATH: $library -> $new_path"
            else
                log "WARN" "Error: Failed to update LC_RPATH for $library."
            fi
        else
            log "WARN" "LC_RPATH $library does not match criteria, skipping."
        fi
    done <<< "$libraries"
}

update_lc_id_dylib() {
    local lib="$1"
    local target_id_path="$2"

    local base_name
    base_name=$(basename "$lib")
    local new_id="$target_id_path/$base_name"

    log "INFO" "Setting LC_ID_DYLIB for $lib to $new_id"
    install_name_tool -id "$new_id" "$lib"
}

update_ext_lib() {
    local lib_folder="$1"
    local target_ext_path="$2"

    shopt -s nullglob
    for lib in "$lib_folder"/*.dylib; do
        [[ -f "$lib" ]] || continue

        if ! file "$lib" | grep -qE "Mach-O.*dynamically linked shared library"; then
            log "WARN" "Skipping non-dylib file: $lib"
            continue
        fi
        color_echo "INFO" "Update external LC_LOAD_DYLIB"
        update_lc_load_dylib "$lib" "$target_ext_path" "$target_ext_path"
        color_echo "INFO" "Update external LC_RPATH"
        update_lc_rpath "$lib" "$target_ext_path" "$target_ext_path"

    done
    shopt -s nullglob
}

update_id_ext_binary(){
    local lib_folder="$1"
    local target_id_path="$2"

    shopt -s nullglob
    for lib in "$lib_folder"/*.dylib; do
        [[ -f "$lib" ]] || continue

        if ! file "$lib" | grep -qE "Mach-O.*dynamically linked shared library"; then
            log "WARN" "Skipping non-dylib file: $lib"
            continue
        fi
        color_echo "INFO" "Update external LC_ID_DYLIB"
        update_lc_id_dylib "$lib" "$target_id_path"
    done
    shopt -s nullglob  
}

update_int_binary(){   
    local binary="$1"
    local target_int_path="$2"
    local target_ext_path="$3"

    color_echo "INFO" "Update LC_LOAD_DYLIB"
    update_lc_load_dylib "$binary" "$target_int_path" "$target_ext_path"

    color_echo "INFO" "Update LC_RPATH"
    update_lc_rpath "$binary" "$target_int_path" "$target_ext_path"
}

update_int_fat_binary() {
    local x86_binary="$1"
    local arm_binary="$2"
    local target_int_path="$3"
    local target_ext_path="$4"

    color_echo "INFO" "Update LC_LOAD_DYLIB"
    update_lc_load_dylib "$x86_binary" "$target_int_path" "$target_ext_path"
    update_lc_load_dylib "$arm_binary" "$target_int_path" "$target_ext_path"

    color_echo "INFO" "Update LC_RPATH"
    update_lc_rpath "$x86_binary" "$target_int_path" "$target_ext_path"
    update_lc_rpath "$arm_binary" "$target_int_path" "$target_ext_path"

}

update_id_int_binary(){
    local library="$1"
    local target_id_path="$2"

    if ! file "$library" | grep -qE "Mach-O.*dynamically linked shared library"; then
        log "WARN" "Skipping non-dylib file: $library"
        continue
    fi
    color_echo "INFO" "Update LC_ID_DYLIB"
    update_lc_id_dylib "$library" "$target_id_path"
 
}