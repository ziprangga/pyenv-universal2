#!/usr/bin/env bash
set -e

source "$(dirname "${BASH_SOURCE[0]}")/tools/u2-utility"
source "$(dirname "${BASH_SOURCE[0]}")/tools/u2-core"

universal2_merge() {
    local python_version="$1"
    local custom_suffix="$2"
    local working_path="$PYENV_ROOT/versions"
    local temp_dir="$PYENV_ROOT/temp_dir/${custom_suffix}_temp"
    local output_dir="${working_path}/$custom_suffix"
    local target_path_int="$output_dir/lib"
    local target_path_ext="$output_dir/deps"
    
    local x86_dir arm_dir
    if [[ "$DRY_RUN" == "true" ]]; then
        color_echo "INFO" "Dry run mode: Skipping directory existence check."
        x86_dir="${working_path}/${python_version}-x86"
        arm_dir="${working_path}/${python_version}-arm"
    else
        x86_dir=$(find "$working_path" -type d -name "${python_version}-x86" 2>/dev/null)
        arm_dir=$(find "$working_path" -type d -name "${python_version}-arm" 2>/dev/null)
    fi

    if [[ -n "$arm_dir" && -n "$x86_dir" ]]; then
           color_echo "INFO" "found python for merging"     
    else
        color_echo "ERROR" "Error: Missing one or both required directories:"
        [[ -z "$arm_dir" ]] && color_echo "ERROR" "python arm directory not found: ${python_version}-arm missing"
        [[ -z "$x86_dir" ]] && color_echo "ERROR" "python x86 directory not found: ${python_version}-x86 missing"
        [[ "$DRY_RUN" == "true" ]] && color_echo "INFO" "Dry run mode: Ignoring missing directories."
        [[ "$DRY_RUN" != "true" ]] && exit 1
    fi

    color_echo "INFO" "Create environment"
    run_if_not_dry rsync -a "$arm_dir/" "$output_dir/"
    local temp_metadata="$temp_dir/metadata"
    local temp_ext_collected_x86="$temp_dir/ext_lib_x86"
    local temp_int_collected_x86="$temp_dir/int_binary_x86"
    run_if_not_dry mkdir -p "$temp_dir" "$target_path_ext" "$temp_metadata" "$temp_ext_collected_x86" "$temp_int_collected_x86"

    color_echo "INFO" "Scan binary & collect external binary"
    local cache_scanner_target="$temp_metadata/scan_output.txt"
    local cache_scanner_x86="$temp_metadata/scan_output_x86.txt"
    local temp_merge_ext_metadata="$temp_metadata/merge_ext.txt"
    local temp_merge_int_metadata="$temp_metadata/merge_int.txt"
    local temp_collected_arm_metadata="$temp_metadata/collected_arm.txt"
    local temp_collected_x86_metadata="$temp_metadata/collected_x86.txt"
    scan_binary_and_cache "$output_dir" "$cache_scanner_target"
    scan_binary_and_cache "$x86_dir" "$cache_scanner_x86"

    while IFS=$'\n' read -r binary; do
        collect_ext_lib "$binary" "$target_path_ext" "$temp_collected_arm_metadata"
    done < "$cache_scanner_target"
  
    while IFS=$'\n' read -r binary; do
        cp -p "$binary" "$temp_int_collected_x86"
        collect_ext_lib "$binary" "$temp_ext_collected_x86" "$temp_collected_x86_metadata"
    done < "$cache_scanner_x86"

    color_echo "INFO" "Update external binary LC_LOAD_DYLIB & LC_RPATH"
    shopt -s nullglob
    for ext_lib_x86 in "$temp_ext_collected_x86"/*; do
        update_lc_load_dylib --binary="$ext_lib_x86" --ext="$target_path_ext"
        update_lc_rpath --binary="$ext_lib_x86" --ext="$target_path_ext"
    done

    for ext_lib_arm in "$target_path_ext"/*; do
        update_lc_load_dylib --binary="$ext_lib_arm" --ext="$target_path_ext"
        update_lc_rpath --binary="$ext_lib_arm" --ext="$target_path_ext"

        local relative_path="${ext_lib_arm#$target_path_ext/}"
        local base_name_ext_lib=$(basename $relative_path)
        local x86_ext_binary="$temp_ext_collected_x86/$base_name_ext_lib"
        local merged_binary="$ext_lib_arm"

        color_echo "INFO" "Merge external binary"
        merge_binary_or_lib "$x86_ext_binary" "$ext_lib_arm" "$merged_binary" "$temp_merge_ext_metadata"

        color_echo "INFO" "Update external LC_ID_DYLIB"
        update_lc_id_dylib "$merged_binary" "@rpath/deps"
    done

    for x86_int_binary in "$temp_int_collected_x86"/*; do
        update_lc_load_dylib --binary="$x86_int_binary" --int="$target_path_int" --ext="$target_path_ext"
        update_lc_rpath --binary="$x86_int_binary" --int="$target_path_int" --ext="$target_path_ext"
    done
    shopt -u nullglob

    while IFS=$'\n' read -r binary; do
        update_lc_load_dylib --binary="$binary" --int="$target_path_int" --ext="$target_path_ext"
        update_lc_rpath --binary="$binary" --int="$target_path_int" --ext="$target_path_ext"

        color_echo "INFO" "Merge internal binary"
        local relative_path="${binary#$output_dir/}"
        local base_name_binary=$(basename $relative_path)
        local x86_int_binary="$temp_int_collected_x86/$base_name_binary"
        local merged_binary="$binary"

        merge_binary_or_lib "$x86_int_binary" "$binary" "$merged_binary" "$temp_merge_int_metadata"

        color_echo "INFO" "Update internal LC_ID_DYLIB"
        update_lc_id_dylib "$merged_binary" "@rpath/lib"
    done < "$cache_scanner_target"

    color_echo "INFO" "Resign codesign..."
    resign_all_binaries "$target_path_ext"

    color_echo "INFO" "test_binary_fat \"$output_dir\""
    test_binary_fat "$output_dir" || {
        if [[ "$DRY_RUN" == "true" ]]; then
                color_echo "INFO" "Dry run mode, skipping test binary."
        else
            log "Error: fat binary tests failed."
            cleanup_temp "$output_dir"
            cleanup_temp "$temp_dir" 
            exit 1
        fi
    }
    color_echo "INFO" "Cleaning up temporary installations..." 
    if [[ "$DRY_RUN" == "true" ]]; then
            color_echo "INFO" "Dry run mode, skipping cleanup of temporary directories."
    else
        if [[ $NO_CLEAN == false ]]; then               
            cleanup_temp "$x86_dir"
            cleanup_temp "$arm_dir"
            cleanup_temp "$temp_dir"
        else
            cleanup_temp "$temp_dir"
        fi
    fi
    color_echo "INFO" "Process completed"
}
