#!/usr/bin/env bash

# copy amr64_dir to output_dir
initialize_output_dir() {
    local arm64_dir="$1"
    local output_dir="$2"

    log "Copying ARM64 directory $arm64_dir to $output_dir..."
    $DRY_RUN || rsync -a "$arm64_dir/" "$output_dir/"
}

# merge file binary
merge_binaries_in_dir() {
    local x86_dir="$1"
    local target_dir="$2"
    local arm_dir="$3"

    
    log "Merging binaries from $x86_dir to $target_dir..."
    find "$x86_dir" -type f -o -type l | while read -r file; do
        if [[ -z "$file" ]]; then
        log "Warning: No files found in $x86_dir. Skipping..."
        continue
        fi

        local rel_path="${file#$x86_dir/}"
        local arm_file="$arm_dir/$rel_path" 
        local fat_file="$target_dir/$rel_path"

        $DRY_RUN || mkdir -p "$(dirname "$fat_file")"

        # Jika file adalah symlink
        if [[ -L "$file" ]]; then
            local link_target
            link_target=$(readlink "$file")
            log "Copying symlink: $file -> $link_target"
            $DRY_RUN || ln -sf "$link_target" "$fat_file"
        fi

        if [[ ! -L "$file" && -f "$file" ]]; then
            if [[ -f "$arm_file" ]]; then
                if file "$arm_file" | grep -q 'Mach-O 64-bit executable arm64'; then
                    $DRY_RUN || lipo -create "$arm_file" "$file" -output "$fat_file"
                else
                    log "ARM file $arm_file is not a valid Mach-O arm64 binary. Copying x86_64 binary to $fat_file."
                    $DRY_RUN || cp -a "$file" "$fat_file"
                fi
            else
                log "ARM file $arm_file is not a valid Mach-O arm64 binary. Copying x86_64 binary to $fat_file."
                $DRY_RUN || cp -a "$file" "$fat_file"
            fi
        fi
    done
}

# Merge file .so
merge_shared_libraries() {
    local x86_dir="$1"
    local target_dir="$2"
    local arm_dir="$3"

    log "Merging shared libraries (.so) from $x86_dir (x86) and $arm_dir (ARM) into $target_dir..."

    find "$x86_dir" -type f -name '*.so' | while read -r file; do
        if [[ -z "$file" ]]; then
            log "Warning: No .so files found in $x86_dir. Skipping..."
            continue
        fi

        local rel_path="${file#$x86_dir/}"
        local arm_file="$arm_dir/$rel_path" 
        local fat_file="$target_dir/$rel_path"

        log "Processing file: $file"
        log "Fat File: $fat_file"
        log "ARM File: $arm_file"

        # validate directory is exist
        $DRY_RUN || mkdir -p "$(dirname "$fat_file")"
        log "Merging x86 and ARM files into $fat_file..."
        $DRY_RUN || lipo -create "$arm_file" "$file" -output "$fat_file"

        if [[ $DRY_RUN = true ]]; then
            echo "Dry run mode, skipped"
        else
            if [[ -f "$fat_file" ]]; then
                log "Successfully created fat shared libraries: $fat_file"
            else
                log "Error: Failed to create fat shared libraries at $fat_file."
                exit 1
            fi
        fi

    done
}


# merge libpython
merge_libpython() {
    local x86_lib_dir="$1"
    local arm_lib_dir="$2"
    local target_lib_dir="$3"
    local python_version="$4"
    local python_minor_version=$(echo "$python_version" | cut -d. -f1,2)

    log "Merging libpython3.x.a files from $x86_lib_dir and $arm_lib_dir to $target_lib_dir..."

    local dylib_arm
    local dylib_x86

    $DRY_RUN || dylib_arm=$(find "$arm_lib_dir" -name "libpython${python_minor_version}*" | grep -E "libpython${python_minor_version}(\.so(\.[0-9]+)?|\.dylib)$" | head -n 1)
    $DRY_RUN || dylib_x86=$(find "$x86_lib_dir" -name "libpython${python_minor_version}*" | grep -E "libpython${python_minor_version}(\.so(\.[0-9]+)?|\.dylib)$" | head -n 1)

    if [[ $DRY_RUN = true ]]; then
        echo "Dry run mode, skipped"
    else
        if [[ -z "${dylib_arm:-}" || -z "${dylib_x86:-}" ]]; then
            [[ -z "$dylib_arm" ]] && log "Error: ARM library not found in $arm_lib_dir."
            [[ -z "$dylib_x86" ]] && log "Error: x86 library not found in $x86_lib_dir
    ."
            log "Error: Missing ARM or x86 library file for merging."
            exit 1
        fi
    fi

    local fat_file="$target_lib_dir/$(basename "$dylib_arm")"
    $DRY_RUN || mkdir -p "$target_lib_dir"
    $DRY_RUN || lipo -create "$dylib_arm" "$dylib_x86" -output "$fat_file"

    if [[ $DRY_RUN = true ]]; then
        echo "Dry run mode, skipped"
    else
        if [[ -f "$fat_file" ]]; then
            log "Successfully created fat library: $fat_file"
        else
            log "Error: Failed to create fat library at $fat_file."
            exit 1
        fi
    fi
}

# merge python binary
merge_binary() {

    local python_version="$1"
    local output_dir="$2"
    local x86_dir="$3"
    local arm_dir="$4"
    local python_minor_version=$(echo "$python_version" | cut -d. -f1,2)


    log "INFO" "Starting binary merge process for Python version $python_version..."

    # Validate input
    if [[ -z "$output_dir" || -z "$x86_dir" || -z "$arm_dir" ]]; then
        log "WARN" "Error: output_dir, x86_dir, and arm_dir must be specified by the user."
        exit 1
    fi

    if [[ ! -d "$output_dir" ]]; then
        log "WARN" "Output directory $output_dir does not exist. Creating it..."
        $DRY_RUN || mkdir -p "$output_dir"
    fi

    initialize_output_dir "$arm_dir" "$output_dir"

    merge_binaries_in_dir "$x86_dir/bin" "$output_dir/bin" "$arm_dir/bin"

    merge_shared_libraries "$x86_dir/lib" "$output_dir/lib" "$arm_dir/lib"

    merge_libpython "$x86_dir/lib" "$arm_dir/lib" "$output_dir/lib" "$python_version"

}