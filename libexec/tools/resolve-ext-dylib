#!/usr/bin/env bash

source "$(dirname "${BASH_SOURCE[0]}")/brew-regex"

copy_and_merge() {
    local python_binary="$1"
    local target_folder="$2"
    local temp_folder="$target_folder/temp"
    local python_dir
    python_dir="$(dirname "$(dirname "$python_binary")")"

    $DRY_RUN || mkdir -p "$temp_folder" "$target_folder"

    color_echo "INFO" "Scanning Python binary and extension modules for external libraries..."

    local libraries=""

    binaries=$(find "$python_dir" \( -type f \( -name "*.so" -o -name "*.dylib" \) -o -path "$python_binary" \))
    while IFS= read -r binary; do
        libs=$(otool -L "$binary" | awk 'NR>1 {print $1}' | grep -E "$BREW_PATH_REGEX" || true)
        libraries+="$libs"$'\n'
    done <<< "$binaries"

    libraries=$(echo "$libraries" | grep . | sort -u)

    while IFS= read -r library; do
        [[ -f "$library" ]] || continue

        archs=$(lipo -info "$library" | grep -oE 'arm64|x86_64')
        
        for arch in $archs; do
            local base_name
            base_name=$(basename "$library")

            if [[ $(echo "$arch" | grep -c 'arm64') -gt 0 && $(echo "$arch" | grep -c 'x86_64') -gt 0 ]]; then
                $DRY_RUN || cp "$library" "$target_folder/$base_name"
            fi

            local arch_folder="${temp_folder}/${base_name}-${arch}"
            $DRY_RUN || mkdir -p "$arch_folder"
            $DRY_RUN || cp "$library" "$arch_folder"
            log "INFO" "Copied $library to $arch_folder"
        done
    done <<< "$libraries"

    color_echo "INFO" "Merging architecture-specific libraries into fat binaries..."    
    for arm_folder in "$temp_folder"/*-arm64; do
        local base_name
        base_name=$(basename "$arm_folder" "-arm64")
        local x86_folder="${temp_folder}/${base_name}-x86_64"
        local merged_file="${target_folder}/${base_name}"
        if [[ -d "$x86_folder" ]]; then
            local arm_binary=$(find "$arm_folder" -type f | head -n 1)
            local x86_binary=$(find "$x86_folder" -type f | head -n 1)
            if [[ -f "$arm_binary" && -f "$x86_binary" ]]; then
                log "INFO" "Merging $arm_binary and $x86_binary into $merged_file"
                $DRY_RUN || lipo -create "$arm_binary" "$x86_binary" -output "$merged_file"
            else
                log "WARN" "Skipping $base_name: Missing binaries."
            fi
        else
            log "WARN" "Skipping $base_name: Missing x86_64 variant."
        fi
    done

    color_echo "INFO" "Cleanup temp folder."
    $DRY_RUN || rm -rf "$temp_folder"

    echo "$libraries"
}

update_ext_rpath() {
    local python_binary="$1"
    local libraries="$2"
    local python_dir
    python_dir="$(dirname "$(dirname "$python_binary")")"

    color_echo "INFO" "Updating extension modules rpath to point to merged libraries..."

    binaries=$(find "$python_dir" \( -type f \( -name "*.so" -o -name "*.dylib" \) -o -path "$python_binary" \))
    while IFS= read -r binary; do
        [[ -f "$binary" ]] || continue
        while IFS= read -r library; do
            [[ -f "$library" ]] || continue
            local base_name
            base_name=$(basename "$library")
            local new_path="@executable_path/../deps/${base_name}"

            if otool -L "$binary" | grep -q "$library"; then
                log "INFO" "Patching $binary: $library -> $new_path"
                $DRY_RUN || install_name_tool -change "$library" "$new_path" "$binary"
            fi
        done <<< "$libraries"
    done <<< "$binaries"
}

update_ext_dylib_path() {
    local python_version="$1"
    local python_path="$2"

    local target_folder="$python_path/deps"
    local minor_version=$(echo "$python_version" | cut -d. -f1,2)
    local python_binary="$python_path/bin/python${minor_version}"

    build_brew_regex

    local libraries
    copy_and_merge "$python_binary" "$target_folder"
    update_ext_rpath "$python_binary" "$libraries"
}