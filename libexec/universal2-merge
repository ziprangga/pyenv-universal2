#!/usr/bin/env bash

source "$(dirname "${BASH_SOURCE[0]}")/tools/u2-utility"
source "$(dirname "${BASH_SOURCE[0]}")/tools/u2-merge-lib-bin"
source "$(dirname "${BASH_SOURCE[0]}")/tools/u2-rpath-updater" 
source "$(dirname "${BASH_SOURCE[0]}")/tools/u2-collect-ext-lib" 

universal2_merge() {
    local python_version="$1"
    local custom_suffix="$2"
    local no_clean="$3"
    local working_path="$PYENV_ROOT/versions"
    local temp_dir="$PYENV_ROOT/temp_dir/${custom_suffix}_temp"
    local output_dir="${working_path}/$custom_suffix"
    local target_path_ext="$output_dir/deps"
    
    if [[ "$DRY_RUN" == "true" ]]; then
         color_echo "INFO" "Dry run mode: Skipping directory existence check."
        local x86_dir="${working_path}/${python_version}-x86"
        local arm_dir="${working_path}/${python_version}-arm"
    else
        local x86_dir=$(find "$working_path" -type d -name "${python_version}-x86" 2>/dev/null)
        local arm_dir=$(find "$working_path" -type d -name "${python_version}-arm" 2>/dev/null)
    fi

    if [[ -n "$arm_dir" && -n "$x86_dir" ]]; then
           color_echo "INFO" "found python for merging"     
    else
        color_echo "ERROR" "Error: Missing one or both required directories:"
        [[ -z "$arm_dir" ]] && color_echo "ERROR" "python arm directory not found: ${python_version}-arm missing"
        [[ -z "$x86_dir" ]] && color_echo "ERROR" "python x86 directory not found: ${python_version}-x86 missing"
        [[ "$DRY_RUN" == "true" ]] && color_echo "INFO" "Dry run mode: Ignoring missing directories."
        [[ "$DRY_RUN" != "true" ]] && exit 1
    fi

    log "INFO" "Create environment"
    $DRY_RUN || rsync -a "$arm_dir/" "$output_dir/"
    local temp_ext_collected_x86="$temp_dir/ext_lib_x86"
    local temp_ext_collected_arm="$temp_dir/ext_lib_arm"
    $DRY_RUN || mkdir -p "$temp_dir/" "$target_path_ext" "$temp_ext_collected_x86" "$temp_ext_collected_arm"

    path_regex

    log "INFO" "Create Fat Binary"
    if [[ "$DRY_RUN" == "true" ]]; then
        color_echo "INFO" "Dry run mode, skipping process."
    else
        local universal_binaries
        universal_binaries=$(scan_binaries $output_dir)   
        for binary in $universal_binaries; do
            local relative_path="${binary#$output_dir/}"
            local x86_binary="$x86_dir/$relative_path"
            local merged_binary="$output_dir/$relative_path"
            merge_int_bin_lib "$x86_binary" "$binary" "$merged_binary"        
        done 
    fi
    
    log "INFO" "Collect external dependencies"
    if [[ "$DRY_RUN" == "true" ]]; then
        color_echo "INFO" "Dry run mode, skipping process."
    else
        local saved_scan_log_output_fat="$temp_dir/${python_version}_scan_output_fat.txt" 
        scan_and_extract_fat_binary "$output_dir" "$temp_dir" "$saved_scan_log_output_fat"
        while IFS='|' read -r binary x86_binary arm_binary; do
            color_echo "INFO" "collecting external binary."
            process_collect_fat_ext_lib "$x86_binary" "$arm_binary" "$temp_ext_collected_x86" "$temp_ext_collected_arm"
        done < "$saved_scan_log_output_fat"

        color_echo "INFO" "update external binary rpath"
        update_ext_lib "$temp_ext_collected_x86" "$output_dir"
        update_ext_lib "$temp_ext_collected_arm" "$output_dir"

        color_echo "INFO" "merging external binary rpath"
        merge_ext_lib "$temp_ext_collected_x86" "$temp_ext_collected_arm" "$target_path_ext"

        while IFS='|' read -r binary x86_binary arm_binary; do
            color_echo "INFO" "update internal binary rpath"
            update_int_fat_binary "$x86_binary" "$arm_binary" "$output_dir"

            color_echo "INFO" "merging internal binary rpath"           
            merge_int_bin_lib "$x86_binary" "$arm_binary" "$binary"
        done < "$saved_scan_log_output_fat"

        color_echo "INFO" "re-assign codedesign external binary"
        resign_all_binaries "$target_path_ext"
    fi

    log "INFO" "test_binary_fat \"$output_dir\""
    test_binary_fat "$output_dir" || {
        if [[ "$DRY_RUN" == "true" ]]; then
                color_echo "INFO" "Dry run mode, skipping test binary."
        else
            log "Error: fat binary tests failed."
            cleanup_temp "$output_dir"
            cleanup_temp "$temp_dir" 
            exit 1
        fi
    }

    color_echo "INFO" "Cleaning up temporary installations..." 
    if [[ "$DRY_RUN" == "true" ]]; then
            color_echo "INFO" "Dry run mode, skipping cleanup of temporary directories."
    else
        if [[ $no_clean == false ]]; then               
            cleanup_temp "$x86_dir"
            cleanup_temp "$arm_dir"
            cleanup_temp "$temp_dir"
        else
            cleanup_temp "$temp_dir"
        fi
        color_echo "INFO" "cleanup temporary file"
    fi

    color_echo "INFO" "Process completed"
}
