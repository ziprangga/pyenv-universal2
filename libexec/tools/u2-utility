#!/usr/bin/env bash
set -e

run_if_not_dry() {
    if [[ "$DRY_RUN" != "true" ]]; then
        "$@"
    else
        color_echo "INFO" "Dry run mode: skipped: $*"
    fi
}

cleanup_temp() {
    local delete_item="$1"

    if [[ -z "$delete_item" || "$delete_item" == "/" ]]; then
        log "ERROR" "Refusing to delete an empty or root path: '$delete_item'"
        color_echo "ERROR" "Refusing to delete an empty or root path"
        return 1
    fi

    if [[ -d "$delete_item" ]]; then
        log "INFO" "Cleaning up temporary directory: $delete_item"
        rm -rf "$delete_item"
        log "INFO" "Cleanup completed."
    else
        log "WARN" "Directory not found: $delete_item"
    fi
}

check_required_commands() {
    log "INFO" "Checking required commands..."
    local required_commands=("lipo" "pyenv" "arch")
    for cmd in "${required_commands[@]}"; do
        command -v "$cmd" >/dev/null 2>&1 || { log "ERROR" "Error: $cmd is not installed."; exit 1; }
    done
}

test_binary_for_arch() {
    local python_path="$1"
    local arch="$2"
    local binary="${python_path}/bin/python"

    if [[ ! -x "$binary" ]]; then
        log "WARN" "Binary not found or not executable: $binary"
        return 1
    fi

    if lipo -archs "$binary" 2>/dev/null | grep -qw "$arch"; then
        log "INFO" "$arch binary is present in: $binary"
        return 0
    else
        log "WARN" "$arch binary is NOT present in: $binary"
        return 1
    fi
}

test_binary_fat() {
    local python_path="$1"
    local arm_test_failed=""
    local x86_test_failed=""

    test_binary_for_arch "$python_path" "arm64" || arm_test_failed=true
    test_binary_for_arch "$python_path" "x86_64" || x86_test_failed=true

    if [[ -z "$arm_test_failed" && -z "$x86_test_failed" ]]; then
        log "INFO" "fat binary tests passed successfully."
        color_echo "INFO" "Binary is universal2: both ARM64 and x86_64 are present."
        return 0
    else
        log "ERROR" "Error: One or both architecture tests failed."
        color_echo "ERROR" "Binary is not universal2"
        return 1
    fi
}

test_binary_conditional() {
    local python_path="$1"

    local arm_test_failed=""
    local x86_test_failed=""

    if ! test_binary_for_arch "$python_path" "arm64"; then
        arm_test_failed=true
    fi
    if ! test_binary_for_arch "$python_path" "x86_64"; then
        x86_test_failed=true
    fi

    if [[ -z "$arm_test_failed" && -z "$x86_test_failed" ]]; then
        log "INFO" "Binary is universal2: both ARM64($arm_test_failed) and x86_64($x86_test_failed) are present."
        color_echo "INFO" "Binary is universal2: both ARM64 and x86_64 are present."
    elif [[ -z "$arm_test_failed" ]]; then
        log "INFO" "Binary is ARM64($arm_test_failed)."
        color_echo "INFO" "Binary is ARM64-only."
    elif [[ -z "$x86_test_failed" ]]; then
        log "INFO" "Binary is x86_64($x86_test_failed)."
        color_echo "INFO" "Binary is x86_64-only."
    else
        log "ERROR" "Binary is invalid: neither ARM64($arm_test_failed) nor x86_64($x86_test_failed) present."
        color_echo "ERROR" "Binary is invalid: neither ARM64 nor x86_64 present."
        return 1
    fi

    return 0
}
